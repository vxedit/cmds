----rev cache----
git rm --cached -r '/_pycache_'
for files-------------
git rm --cached -r .env

----------…or create a new repository on the command line--------------
cd path/to/your/local/project
git init
git add .
git commit -m "Initial commit"
git remote add origin https://github.com/your-username/my-new-repo.git
git push -u origin master

---------- or ------------------

echo "# cmds" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin git@github.com:vxedit/cmds.git
git push -u origin main

-----------------…or push an existing repository from the command line----------------

ssh connect:
git remote add origin git@github.com:vxedit/cmds.git
http connect:
git remote add origin https://github.com/vxedit/cmds.git
git branch -M main
git push -u origin main

------------------------------
generate ssh and connect--------
ssh-keygen -t rsa -b 4096 -C "your-github(which has the repo)-email@example.com"
ssh-keygen -t rsa -b 4096 -C "irfan.autobits@gmail.com"
show key--
cat /home/irfan/.ssh/id_rsa_irfanautobits.pub

add public key in gie account--

test connection-
ssh -T git@github.com

connect----
git remote add origin git@github.com:irfan-autobits/compreface-release.git

git remote set-url origin git@github.com:your-other-account/compreface-release.git
----origin-------
remove--
git remote remove origin

check--------
git remote set-url origin https://github.com/irfan-autobits/compreface-release.git
git fetch origin

add--
ssh connect:
git remote add origin git@github.com:vxedit/cmds.git
http connect:
git remote add origin https://github.com/vxedit/cmds.git

verify--
git remote -v

git fetch origin
git merge origin/main

---------rename branch (optional)----------------
for current:
git branch -m new-branch-name

to a new branch--
git checkout -b main
git checkout -b master
switch wothout creating new---
git checkout master

set upstream----
git push --set-upstream origin main

delete----
git push origin --delete master

------------unrelated history-------------
git pull origin main --allow-unrelated-histories

-----------remove commit-----------
without changeing current code--------
git reset --soft HEAD~1
changing current code-------
git reset --hard HEAD~1

-------forced push-------------
git push origin <branch-name> --force
---------revert commit--------------------
git revert to create a new commit that undoes the changes from the previous commit. ---------
git revert HEAD
git push origin <branch-name>

------------- user -----------------
Current User Config:
git config --list

Set the Correct User:
git config user.name "Your Name"
git config user.email "your-email@example.com"

global:
git config --global user.name "Irfan"
git config --global user.email "irfan.sipai.py@outlook.com"

git config --local user.name "irfan-autobits"
git config --local user.email "irfan.autobits@gmail.com"

----------------------------for release-----------
git add .
git commit -m "Prepare release v1.0.0"

tag the release---------
git tag -a v1.0.0 -m "Release version 1.0.0"

push change----------------
git push origin master  # or the branch name you're working on
push tag-----------------
git push origin v1.0.0

sec tag----------
git add .
git commit -m "Prepare release v1.0.1"  # Change version accordingly
git tag -a v1.0.0-split -m "sec tag for split serviece"   # Change version accordingly
git push origin master  # Push your changes
git push origin v1.0.1  # Push the new tag


